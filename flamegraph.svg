<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="29417138"><g><title>[[stack]] (1,994,950 samples, 6.78%)</title><rect x="0.0000%" y="677" width="6.7816%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1994950"/><text x="0.2500%" y="687.50">[[stack]]</text></g><g><title>sqlite3VdbeAddOp4Int (1,994,950 samples, 6.78%)</title><rect x="0.0000%" y="661" width="6.7816%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1994950"/><text x="0.2500%" y="671.50">sqlite3Vd..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="405" width="7.1246%" height="15" fill="rgb(221,193,54)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="415.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="389" width="7.1246%" height="15" fill="rgb(248,212,6)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="399.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="373" width="7.1246%" height="15" fill="rgb(208,68,35)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="383.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="357" width="7.1246%" height="15" fill="rgb(232,128,0)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="367.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="341" width="7.1246%" height="15" fill="rgb(207,160,47)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="351.50">&lt;alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="325" width="7.1246%" height="15" fill="rgb(228,23,34)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="335.50">alloc::vec..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="309" width="7.1246%" height="15" fill="rgb(218,30,26)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="319.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="293" width="7.1246%" height="15" fill="rgb(220,122,19)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="303.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="277" width="7.1246%" height="15" fill="rgb(250,228,42)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="287.50">core::iter..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="261" width="7.1246%" height="15" fill="rgb(240,193,28)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="271.50">core::iter..</text></g><g><title>batch_packs_read::main::{{closure}} (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="245" width="7.1246%" height="15" fill="rgb(216,20,37)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="255.50">batch_pack..</text></g><g><title>hex::encode (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="229" width="7.1246%" height="15" fill="rgb(206,188,39)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="239.50">hex::encode</text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="213" width="7.1246%" height="15" fill="rgb(217,207,13)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="223.50">&lt;T as hex:..</text></g><g><title>hex::encode_to_iter (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="197" width="7.1246%" height="15" fill="rgb(231,73,38)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="207.50">hex::encod..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="181" width="7.1246%" height="15" fill="rgb(225,20,46)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="191.50">core::iter..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="165" width="7.1246%" height="15" fill="rgb(210,31,41)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="175.50">&lt;alloc::st..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="149" width="7.1246%" height="15" fill="rgb(221,200,47)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="159.50">&lt;alloc::st..</text></g><g><title>alloc::string::String::reserve (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="133" width="7.1246%" height="15" fill="rgb(226,26,5)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="143.50">alloc::str..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="117" width="7.1246%" height="15" fill="rgb(249,33,26)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="127.50">alloc::vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="101" width="7.1246%" height="15" fill="rgb(235,183,28)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="111.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="85" width="7.1246%" height="15" fill="rgb(221,5,38)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="95.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="69" width="7.1246%" height="15" fill="rgb(247,18,42)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="79.50">alloc::raw..</text></g><g><title>alloc::raw_vec::finish_grow (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="53" width="7.1246%" height="15" fill="rgb(241,131,45)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="63.50">alloc::raw..</text></g><g><title>__GI___libc_malloc (2,095,863 samples, 7.12%)</title><rect x="6.7816%" y="37" width="7.1246%" height="15" fill="rgb(249,31,29)" fg:x="1994950" fg:w="2095863"/><text x="7.0316%" y="47.50">__GI___lib..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="325" width="8.8054%" height="15" fill="rgb(225,111,53)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="335.50">&lt;alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="309" width="8.8054%" height="15" fill="rgb(238,160,17)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="319.50">alloc::vec::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="293" width="8.8054%" height="15" fill="rgb(214,148,48)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="303.50">&lt;core::iter:..</text></g><g><title>&lt;rusqlite::row::MappedRows&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="277" width="8.8054%" height="15" fill="rgb(232,36,49)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="287.50">&lt;rusqlite::r..</text></g><g><title>rusqlite::row::Rows::next (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="261" width="8.8054%" height="15" fill="rgb(209,103,24)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="271.50">rusqlite::ro..</text></g><g><title>&lt;rusqlite::row::Rows as fallible_streaming_iterator::FallibleStreamingIterator&gt;::advance (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="245" width="8.8054%" height="15" fill="rgb(229,88,8)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="255.50">&lt;rusqlite::r..</text></g><g><title>rusqlite::statement::Statement::step (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="229" width="8.8054%" height="15" fill="rgb(213,181,19)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="239.50">rusqlite::st..</text></g><g><title>rusqlite::raw_statement::RawStatement::step (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="213" width="8.8054%" height="15" fill="rgb(254,191,54)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="223.50">rusqlite::ra..</text></g><g><title>sqlite3_step (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="197" width="8.8054%" height="15" fill="rgb(241,83,37)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="207.50">sqlite3_step</text></g><g><title>sqlite3VdbeExec (2,590,306 samples, 8.81%)</title><rect x="13.9062%" y="181" width="8.8054%" height="15" fill="rgb(233,36,39)" fg:x="4090813" fg:w="2590306"/><text x="14.1562%" y="191.50">sqlite3VdbeE..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (4,865,320 samples, 16.54%)</title><rect x="13.9062%" y="389" width="16.5391%" height="15" fill="rgb(226,3,54)" fg:x="4090813" fg:w="4865320"/><text x="14.1562%" y="399.50">core::iter::traits::iterat..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4,865,320 samples, 16.54%)</title><rect x="13.9062%" y="373" width="16.5391%" height="15" fill="rgb(245,192,40)" fg:x="4090813" fg:w="4865320"/><text x="14.1562%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,865,320 samples, 16.54%)</title><rect x="13.9062%" y="357" width="16.5391%" height="15" fill="rgb(238,167,29)" fg:x="4090813" fg:w="4865320"/><text x="14.1562%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4,865,320 samples, 16.54%)</title><rect x="13.9062%" y="341" width="16.5391%" height="15" fill="rgb(232,182,51)" fg:x="4090813" fg:w="4865320"/><text x="14.1562%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="325" width="7.7336%" height="15" fill="rgb(231,60,39)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="335.50">&lt;core::iter..</text></g><g><title>&lt;rusqlite::row::MappedRows&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="309" width="7.7336%" height="15" fill="rgb(208,69,12)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="319.50">&lt;rusqlite::..</text></g><g><title>rusqlite::row::Rows::next (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="293" width="7.7336%" height="15" fill="rgb(235,93,37)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="303.50">rusqlite::r..</text></g><g><title>&lt;rusqlite::row::Rows as fallible_streaming_iterator::FallibleStreamingIterator&gt;::advance (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="277" width="7.7336%" height="15" fill="rgb(213,116,39)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="287.50">&lt;rusqlite::..</text></g><g><title>rusqlite::statement::Statement::step (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="261" width="7.7336%" height="15" fill="rgb(222,207,29)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="271.50">rusqlite::s..</text></g><g><title>rusqlite::raw_statement::RawStatement::step (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="245" width="7.7336%" height="15" fill="rgb(206,96,30)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="255.50">rusqlite::r..</text></g><g><title>sqlite3_step (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="229" width="7.7336%" height="15" fill="rgb(218,138,4)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="239.50">sqlite3_step</text></g><g><title>sqlite3VdbeExec (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="213" width="7.7336%" height="15" fill="rgb(250,191,14)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="223.50">sqlite3Vdbe..</text></g><g><title>sqlite3BtreeInsert (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="197" width="7.7336%" height="15" fill="rgb(239,60,40)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="207.50">sqlite3Btre..</text></g><g><title>sqlite3BtreeIndexMoveto (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="181" width="7.7336%" height="15" fill="rgb(206,27,48)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="191.50">sqlite3Btre..</text></g><g><title>sqlite3VdbeRecordCompareWithSkip (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="165" width="7.7336%" height="15" fill="rgb(225,35,8)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="175.50">sqlite3Vdbe..</text></g><g><title>[libsqlite3.so.0.8.6] (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="149" width="7.7336%" height="15" fill="rgb(250,213,24)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="159.50">[libsqlite3..</text></g><g><title>__memcmp_evex_movbe (2,275,014 samples, 7.73%)</title><rect x="22.7117%" y="133" width="7.7336%" height="15" fill="rgb(247,123,22)" fg:x="6681119" fg:w="2275014"/><text x="22.9617%" y="143.50">__memcmp_ev..</text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="389" width="12.1679%" height="15" fill="rgb(231,138,38)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="399.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fs::File&gt; (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="373" width="12.1679%" height="15" fill="rgb(231,145,46)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="383.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fd::FileDesc&gt; (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="357" width="12.1679%" height="15" fill="rgb(251,118,11)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="367.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="341" width="12.1679%" height="15" fill="rgb(217,147,25)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="351.50">core::ptr::drop_in..</text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="325" width="12.1679%" height="15" fill="rgb(247,81,37)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="335.50">&lt;std::os::fd::owne..</text></g><g><title>__GI___close (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="309" width="12.1679%" height="15" fill="rgb(209,12,38)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="319.50">__GI___close</text></g><g><title>entry_SYSCALL_64_after_hwframe (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="293" width="12.1679%" height="15" fill="rgb(227,1,9)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="303.50">entry_SYSCALL_64_a..</text></g><g><title>do_syscall_64 (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="277" width="12.1679%" height="15" fill="rgb(248,47,43)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="287.50">do_syscall_64</text></g><g><title>__x64_sys_close (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="261" width="12.1679%" height="15" fill="rgb(221,10,30)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="271.50">__x64_sys_close</text></g><g><title>close_fd (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="245" width="12.1679%" height="15" fill="rgb(210,229,1)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="255.50">close_fd</text></g><g><title>fput (3,579,456 samples, 12.17%)</title><rect x="30.4453%" y="229" width="12.1679%" height="15" fill="rgb(222,148,37)" fg:x="8956133" fg:w="3579456"/><text x="30.6953%" y="239.50">fput</text></g><g><title>rsdos::container::Container::packs (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="389" width="11.7279%" height="15" fill="rgb(234,67,33)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="399.50">rsdos::container:..</text></g><g><title>std::path::Path::is_dir (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="373" width="11.7279%" height="15" fill="rgb(247,98,35)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="383.50">std::path::Path::..</text></g><g><title>std::fs::metadata (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="357" width="11.7279%" height="15" fill="rgb(247,138,52)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="367.50">std::fs::metadata</text></g><g><title>std::sys::pal::unix::fs::stat (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="341" width="11.7279%" height="15" fill="rgb(213,79,30)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="351.50">std::sys::pal::un..</text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="325" width="11.7279%" height="15" fill="rgb(246,177,23)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="335.50">std::sys::pal::co..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="309" width="11.7279%" height="15" fill="rgb(230,62,27)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="319.50">std::sys::pal::co..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="293" width="11.7279%" height="15" fill="rgb(216,154,8)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="303.50">std::sys::pal::co..</text></g><g><title>std::sys::pal::unix::fs::stat::{{closure}} (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="277" width="11.7279%" height="15" fill="rgb(244,35,45)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="287.50">std::sys::pal::un..</text></g><g><title>std::sys::pal::unix::fs::try_statx (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="261" width="11.7279%" height="15" fill="rgb(251,115,12)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="271.50">std::sys::pal::un..</text></g><g><title>std::sys::pal::unix::fs::try_statx::statx (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="245" width="11.7279%" height="15" fill="rgb(240,54,50)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="255.50">std::sys::pal::un..</text></g><g><title>statx (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="229" width="11.7279%" height="15" fill="rgb(233,84,52)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="239.50">statx</text></g><g><title>entry_SYSCALL_64_after_hwframe (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="213" width="11.7279%" height="15" fill="rgb(207,117,47)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="223.50">entry_SYSCALL_64_..</text></g><g><title>do_syscall_64 (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="197" width="11.7279%" height="15" fill="rgb(249,43,39)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="207.50">do_syscall_64</text></g><g><title>__x64_sys_statx (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="181" width="11.7279%" height="15" fill="rgb(209,38,44)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="191.50">__x64_sys_statx</text></g><g><title>getname_flags (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="165" width="11.7279%" height="15" fill="rgb(236,212,23)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="175.50">getname_flags</text></g><g><title>getname_flags.part.0 (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="149" width="11.7279%" height="15" fill="rgb(242,79,21)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="159.50">getname_flags.par..</text></g><g><title>strncpy_from_user (3,450,010 samples, 11.73%)</title><rect x="42.6132%" y="133" width="11.7279%" height="15" fill="rgb(211,96,35)" fg:x="12535589" fg:w="3450010"/><text x="42.8632%" y="143.50">strncpy_from_user</text></g><g><title>rusqlite::Connection::open (2,006,380 samples, 6.82%)</title><rect x="54.3411%" y="389" width="6.8204%" height="15" fill="rgb(253,215,40)" fg:x="15985599" fg:w="2006380"/><text x="54.5911%" y="399.50">rusqlite:..</text></g><g><title>rusqlite::Connection::open_with_flags (2,006,380 samples, 6.82%)</title><rect x="54.3411%" y="373" width="6.8204%" height="15" fill="rgb(211,81,21)" fg:x="15985599" fg:w="2006380"/><text x="54.5911%" y="383.50">rusqlite:..</text></g><g><title>rusqlite::inner_connection::InnerConnection::open_with_flags (2,006,380 samples, 6.82%)</title><rect x="54.3411%" y="357" width="6.8204%" height="15" fill="rgb(208,190,38)" fg:x="15985599" fg:w="2006380"/><text x="54.5911%" y="367.50">rusqlite:..</text></g><g><title>[libsqlite3.so.0.8.6] (2,006,380 samples, 6.82%)</title><rect x="54.3411%" y="341" width="6.8204%" height="15" fill="rgb(235,213,38)" fg:x="15985599" fg:w="2006380"/><text x="54.5911%" y="351.50">[libsqlit..</text></g><g><title>sqlite3BtreeOpen (2,006,380 samples, 6.82%)</title><rect x="54.3411%" y="325" width="6.8204%" height="15" fill="rgb(237,122,38)" fg:x="15985599" fg:w="2006380"/><text x="54.5911%" y="335.50">sqlite3Bt..</text></g><g><title>sqlite3PagerOpen (2,006,380 samples, 6.82%)</title><rect x="54.3411%" y="309" width="6.8204%" height="15" fill="rgb(244,218,35)" fg:x="15985599" fg:w="2006380"/><text x="54.5911%" y="319.50">sqlite3Pa..</text></g><g><title>sqlite3DbFreeNN (2,006,380 samples, 6.82%)</title><rect x="54.3411%" y="293" width="6.8204%" height="15" fill="rgb(240,68,47)" fg:x="15985599" fg:w="2006380"/><text x="54.5911%" y="303.50">sqlite3Db..</text></g><g><title>do_filp_open (2,871,533 samples, 9.76%)</title><rect x="61.1616%" y="149" width="9.7614%" height="15" fill="rgb(210,16,53)" fg:x="17991979" fg:w="2871533"/><text x="61.4116%" y="159.50">do_filp_open</text></g><g><title>path_openat (2,871,533 samples, 9.76%)</title><rect x="61.1616%" y="133" width="9.7614%" height="15" fill="rgb(235,124,12)" fg:x="17991979" fg:w="2871533"/><text x="61.4116%" y="143.50">path_openat</text></g><g><title>do_open (2,871,533 samples, 9.76%)</title><rect x="61.1616%" y="117" width="9.7614%" height="15" fill="rgb(224,169,11)" fg:x="17991979" fg:w="2871533"/><text x="61.4116%" y="127.50">do_open</text></g><g><title>std::fs::OpenOptions::open (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="389" width="20.9571%" height="15" fill="rgb(250,166,2)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="399.50">std::fs::OpenOptions::open</text></g><g><title>std::fs::OpenOptions::_open (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="373" width="20.9571%" height="15" fill="rgb(242,216,29)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="383.50">std::fs::OpenOptions::_open</text></g><g><title>std::sys::pal::unix::fs::File::open (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="357" width="20.9571%" height="15" fill="rgb(230,116,27)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="367.50">std::sys::pal::unix::fs::File::op..</text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="341" width="20.9571%" height="15" fill="rgb(228,99,48)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="351.50">std::sys::pal::common::small_c_st..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="325" width="20.9571%" height="15" fill="rgb(253,11,6)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="335.50">std::sys::pal::common::small_c_st..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="309" width="20.9571%" height="15" fill="rgb(247,143,39)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="319.50">std::sys::pal::common::small_c_st..</text></g><g><title>std::sys::pal::unix::fs::File::open::{{closure}} (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="293" width="20.9571%" height="15" fill="rgb(236,97,10)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="303.50">std::sys::pal::unix::fs::File::op..</text></g><g><title>std::sys::pal::unix::fs::File::open_c (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="277" width="20.9571%" height="15" fill="rgb(233,208,19)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="287.50">std::sys::pal::unix::fs::File::op..</text></g><g><title>std::sys::pal::unix::cvt_r (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="261" width="20.9571%" height="15" fill="rgb(216,164,2)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="271.50">std::sys::pal::unix::cvt_r</text></g><g><title>std::sys::pal::unix::fs::File::open_c::{{closure}} (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="245" width="20.9571%" height="15" fill="rgb(220,129,5)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="255.50">std::sys::pal::unix::fs::File::op..</text></g><g><title>__libc_open64 (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="229" width="20.9571%" height="15" fill="rgb(242,17,10)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="239.50">__libc_open64</text></g><g><title>entry_SYSCALL_64_after_hwframe (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="213" width="20.9571%" height="15" fill="rgb(242,107,0)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="223.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="197" width="20.9571%" height="15" fill="rgb(251,28,31)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="207.50">do_syscall_64</text></g><g><title>__x64_sys_openat (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="181" width="20.9571%" height="15" fill="rgb(233,223,10)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="191.50">__x64_sys_openat</text></g><g><title>do_sys_openat2 (6,164,991 samples, 20.96%)</title><rect x="61.1616%" y="165" width="20.9571%" height="15" fill="rgb(215,21,27)" fg:x="17991979" fg:w="6164991"/><text x="61.4116%" y="175.50">do_sys_openat2</text></g><g><title>getname (3,293,458 samples, 11.20%)</title><rect x="70.9230%" y="149" width="11.1957%" height="15" fill="rgb(232,23,21)" fg:x="20863512" fg:w="3293458"/><text x="71.1730%" y="159.50">getname</text></g><g><title>getname_flags.part.0 (3,293,458 samples, 11.20%)</title><rect x="70.9230%" y="133" width="11.1957%" height="15" fill="rgb(244,5,23)" fg:x="20863512" fg:w="3293458"/><text x="71.1730%" y="143.50">getname_flags.pa..</text></g><g><title>kmem_cache_alloc (3,293,458 samples, 11.20%)</title><rect x="70.9230%" y="117" width="11.1957%" height="15" fill="rgb(226,81,46)" fg:x="20863512" fg:w="3293458"/><text x="71.1730%" y="127.50">kmem_cache_alloc</text></g><g><title>__libc_start_main_impl (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="661" width="85.8875%" height="15" fill="rgb(247,70,30)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="671.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="645" width="85.8875%" height="15" fill="rgb(212,68,19)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="655.50">__libc_start_call_main</text></g><g><title>main (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="629" width="85.8875%" height="15" fill="rgb(240,187,13)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="613" width="85.8875%" height="15" fill="rgb(223,113,26)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="597" width="85.8875%" height="15" fill="rgb(206,192,2)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="581" width="85.8875%" height="15" fill="rgb(241,108,4)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="565" width="85.8875%" height="15" fill="rgb(247,173,49)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="549" width="85.8875%" height="15" fill="rgb(224,114,35)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="559.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="533" width="85.8875%" height="15" fill="rgb(245,159,27)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="517" width="85.8875%" height="15" fill="rgb(245,172,44)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="501" width="85.8875%" height="15" fill="rgb(236,23,11)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="485" width="85.8875%" height="15" fill="rgb(205,117,38)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="469" width="85.8875%" height="15" fill="rgb(237,72,25)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="479.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="453" width="85.8875%" height="15" fill="rgb(244,70,9)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="437" width="85.8875%" height="15" fill="rgb(217,125,39)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>batch_packs_read::main (25,265,645 samples, 85.89%)</title><rect x="6.7816%" y="421" width="85.8875%" height="15" fill="rgb(235,36,10)" fg:x="1994950" fg:w="25265645"/><text x="7.0316%" y="431.50">batch_packs_read::main</text></g><g><title>rsdos::io_packs::multi_pull_from_packs (23,169,782 samples, 78.76%)</title><rect x="13.9062%" y="405" width="78.7629%" height="15" fill="rgb(251,123,47)" fg:x="4090813" fg:w="23169782"/><text x="14.1562%" y="415.50">rsdos::io_packs::multi_pull_from_packs</text></g><g><title>std::os::unix::fs::FileExt::read_exact_at (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="389" width="10.5504%" height="15" fill="rgb(221,13,13)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="399.50">std::os::unix::..</text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::read_at (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="373" width="10.5504%" height="15" fill="rgb(238,131,9)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="383.50">&lt;std::fs::File ..</text></g><g><title>std::sys::pal::unix::fs::File::read_at (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="357" width="10.5504%" height="15" fill="rgb(211,50,8)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="367.50">std::sys::pal::..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_at (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="341" width="10.5504%" height="15" fill="rgb(245,182,24)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="351.50">std::sys::pal::..</text></g><g><title>__libc_pread64 (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="325" width="10.5504%" height="15" fill="rgb(242,14,37)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="335.50">__libc_pread64</text></g><g><title>entry_SYSCALL_64_after_hwframe (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="309" width="10.5504%" height="15" fill="rgb(246,228,12)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="319.50">entry_SYSCALL_6..</text></g><g><title>do_syscall_64 (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="293" width="10.5504%" height="15" fill="rgb(213,55,15)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="303.50">do_syscall_64</text></g><g><title>__x64_sys_pread64 (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="277" width="10.5504%" height="15" fill="rgb(209,9,3)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="287.50">__x64_sys_pread..</text></g><g><title>vfs_read (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="261" width="10.5504%" height="15" fill="rgb(230,59,30)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="271.50">vfs_read</text></g><g><title>ext4_file_read_iter (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="245" width="10.5504%" height="15" fill="rgb(209,121,21)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="255.50">ext4_file_read_..</text></g><g><title>generic_file_read_iter (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="229" width="10.5504%" height="15" fill="rgb(220,109,13)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="239.50">generic_file_re..</text></g><g><title>filemap_read (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="213" width="10.5504%" height="15" fill="rgb(232,18,1)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="223.50">filemap_read</text></g><g><title>touch_atime (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="197" width="10.5504%" height="15" fill="rgb(215,41,42)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="207.50">touch_atime</text></g><g><title>mnt_user_ns (3,103,625 samples, 10.55%)</title><rect x="82.1187%" y="181" width="10.5504%" height="15" fill="rgb(224,123,36)" fg:x="24156970" fg:w="3103625"/><text x="82.3687%" y="191.50">mnt_user_ns</text></g><g><title>_start (27,069,827 samples, 92.02%)</title><rect x="6.7816%" y="677" width="92.0206%" height="15" fill="rgb(240,125,3)" fg:x="1994950" fg:w="27069827"/><text x="7.0316%" y="687.50">_start</text></g><g><title>_dl_start (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="661" width="6.1331%" height="15" fill="rgb(205,98,50)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="671.50">_dl_start</text></g><g><title>_dl_start_final (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="645" width="6.1331%" height="15" fill="rgb(205,185,37)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="655.50">_dl_star..</text></g><g><title>_dl_sysdep_start (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="629" width="6.1331%" height="15" fill="rgb(238,207,15)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="639.50">_dl_sysd..</text></g><g><title>dl_main (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="613" width="6.1331%" height="15" fill="rgb(213,199,42)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="623.50">dl_main</text></g><g><title>_dl_map_object_deps (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="597" width="6.1331%" height="15" fill="rgb(235,201,11)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="607.50">_dl_map_..</text></g><g><title>_dl_catch_exception (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="581" width="6.1331%" height="15" fill="rgb(207,46,11)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="591.50">_dl_catc..</text></g><g><title>openaux (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="565" width="6.1331%" height="15" fill="rgb(241,35,35)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="575.50">openaux</text></g><g><title>_dl_map_object (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="549" width="6.1331%" height="15" fill="rgb(243,32,47)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="559.50">_dl_map_..</text></g><g><title>_dl_load_cache_lookup (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="533" width="6.1331%" height="15" fill="rgb(247,202,23)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="543.50">_dl_load..</text></g><g><title>_dl_sysdep_read_whole_file (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="517" width="6.1331%" height="15" fill="rgb(219,102,11)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="527.50">_dl_sysd..</text></g><g><title>__GI___open64_nocancel (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="501" width="6.1331%" height="15" fill="rgb(243,110,44)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="511.50">__GI___o..</text></g><g><title>entry_SYSCALL_64_after_hwframe (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="485" width="6.1331%" height="15" fill="rgb(222,74,54)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="495.50">entry_SY..</text></g><g><title>do_syscall_64 (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="469" width="6.1331%" height="15" fill="rgb(216,99,12)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="479.50">do_sysca..</text></g><g><title>__x64_sys_openat (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="453" width="6.1331%" height="15" fill="rgb(226,22,26)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="463.50">__x64_sy..</text></g><g><title>do_sys_openat2 (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="437" width="6.1331%" height="15" fill="rgb(217,163,10)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="447.50">do_sys_o..</text></g><g><title>do_filp_open (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="421" width="6.1331%" height="15" fill="rgb(213,25,53)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="431.50">do_filp_..</text></g><g><title>path_openat (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="405" width="6.1331%" height="15" fill="rgb(252,105,26)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="415.50">path_ope..</text></g><g><title>alloc_empty_file (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="389" width="6.1331%" height="15" fill="rgb(220,39,43)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="399.50">alloc_em..</text></g><g><title>__alloc_file (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="373" width="6.1331%" height="15" fill="rgb(229,68,48)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="383.50">__alloc_..</text></g><g><title>kmem_cache_alloc (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="357" width="6.1331%" height="15" fill="rgb(252,8,32)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="367.50">kmem_cac..</text></g><g><title>memcg_slab_post_alloc_hook (1,804,182 samples, 6.13%)</title><rect x="92.6691%" y="341" width="6.1331%" height="15" fill="rgb(223,20,43)" fg:x="27260595" fg:w="1804182"/><text x="92.9191%" y="351.50">memcg_sl..</text></g><g><title>batch_packs_rea (29,392,104 samples, 99.91%)</title><rect x="0.0000%" y="693" width="99.9149%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="29392104"/><text x="0.2500%" y="703.50">batch_packs_rea</text></g><g><title>entry_SYSCALL_64_after_hwframe (327,327 samples, 1.11%)</title><rect x="98.8022%" y="677" width="1.1127%" height="15" fill="rgb(236,28,36)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="687.50"></text></g><g><title>do_syscall_64 (327,327 samples, 1.11%)</title><rect x="98.8022%" y="661" width="1.1127%" height="15" fill="rgb(249,185,26)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="671.50"></text></g><g><title>__x64_sys_execve (327,327 samples, 1.11%)</title><rect x="98.8022%" y="645" width="1.1127%" height="15" fill="rgb(249,174,33)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="655.50"></text></g><g><title>do_execveat_common.isra.0 (327,327 samples, 1.11%)</title><rect x="98.8022%" y="629" width="1.1127%" height="15" fill="rgb(233,201,37)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="639.50"></text></g><g><title>bprm_execve (327,327 samples, 1.11%)</title><rect x="98.8022%" y="613" width="1.1127%" height="15" fill="rgb(221,78,26)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="623.50"></text></g><g><title>bprm_execve.part.0 (327,327 samples, 1.11%)</title><rect x="98.8022%" y="597" width="1.1127%" height="15" fill="rgb(250,127,30)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="607.50"></text></g><g><title>exec_binprm (327,327 samples, 1.11%)</title><rect x="98.8022%" y="581" width="1.1127%" height="15" fill="rgb(230,49,44)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="591.50"></text></g><g><title>search_binary_handler (327,327 samples, 1.11%)</title><rect x="98.8022%" y="565" width="1.1127%" height="15" fill="rgb(229,67,23)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="575.50"></text></g><g><title>load_elf_binary (327,327 samples, 1.11%)</title><rect x="98.8022%" y="549" width="1.1127%" height="15" fill="rgb(249,83,47)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="559.50"></text></g><g><title>setup_arg_pages (327,327 samples, 1.11%)</title><rect x="98.8022%" y="533" width="1.1127%" height="15" fill="rgb(215,43,3)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="543.50"></text></g><g><title>shift_arg_pages (327,327 samples, 1.11%)</title><rect x="98.8022%" y="517" width="1.1127%" height="15" fill="rgb(238,154,13)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="527.50"></text></g><g><title>move_page_tables (327,327 samples, 1.11%)</title><rect x="98.8022%" y="501" width="1.1127%" height="15" fill="rgb(219,56,2)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="511.50"></text></g><g><title>move_page_tables.part.0 (327,327 samples, 1.11%)</title><rect x="98.8022%" y="485" width="1.1127%" height="15" fill="rgb(233,0,4)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="495.50"></text></g><g><title>__pmd_alloc (327,327 samples, 1.11%)</title><rect x="98.8022%" y="469" width="1.1127%" height="15" fill="rgb(235,30,7)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="479.50"></text></g><g><title>alloc_pages (327,327 samples, 1.11%)</title><rect x="98.8022%" y="453" width="1.1127%" height="15" fill="rgb(250,79,13)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="463.50"></text></g><g><title>__alloc_pages (327,327 samples, 1.11%)</title><rect x="98.8022%" y="437" width="1.1127%" height="15" fill="rgb(211,146,34)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="447.50"></text></g><g><title>get_page_from_freelist (327,327 samples, 1.11%)</title><rect x="98.8022%" y="421" width="1.1127%" height="15" fill="rgb(228,22,38)" fg:x="29064777" fg:w="327327"/><text x="99.0522%" y="431.50"></text></g><g><title>all (29,417,138 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="29417138"/><text x="0.2500%" y="719.50"></text></g><g><title>perf-exec (25,034 samples, 0.09%)</title><rect x="99.9149%" y="693" width="0.0851%" height="15" fill="rgb(221,155,16)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (25,034 samples, 0.09%)</title><rect x="99.9149%" y="677" width="0.0851%" height="15" fill="rgb(215,215,53)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="687.50"></text></g><g><title>do_syscall_64 (25,034 samples, 0.09%)</title><rect x="99.9149%" y="661" width="0.0851%" height="15" fill="rgb(223,4,10)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="671.50"></text></g><g><title>__x64_sys_execve (25,034 samples, 0.09%)</title><rect x="99.9149%" y="645" width="0.0851%" height="15" fill="rgb(234,103,6)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="655.50"></text></g><g><title>do_execveat_common.isra.0 (25,034 samples, 0.09%)</title><rect x="99.9149%" y="629" width="0.0851%" height="15" fill="rgb(227,97,0)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="639.50"></text></g><g><title>bprm_execve (25,034 samples, 0.09%)</title><rect x="99.9149%" y="613" width="0.0851%" height="15" fill="rgb(234,150,53)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="623.50"></text></g><g><title>bprm_execve.part.0 (25,034 samples, 0.09%)</title><rect x="99.9149%" y="597" width="0.0851%" height="15" fill="rgb(228,201,54)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="607.50"></text></g><g><title>exec_binprm (25,034 samples, 0.09%)</title><rect x="99.9149%" y="581" width="0.0851%" height="15" fill="rgb(222,22,37)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="591.50"></text></g><g><title>search_binary_handler (25,034 samples, 0.09%)</title><rect x="99.9149%" y="565" width="0.0851%" height="15" fill="rgb(237,53,32)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="575.50"></text></g><g><title>load_elf_binary (25,034 samples, 0.09%)</title><rect x="99.9149%" y="549" width="0.0851%" height="15" fill="rgb(233,25,53)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="559.50"></text></g><g><title>begin_new_exec (25,034 samples, 0.09%)</title><rect x="99.9149%" y="533" width="0.0851%" height="15" fill="rgb(210,40,34)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="543.50"></text></g><g><title>perf_event_exec (25,034 samples, 0.09%)</title><rect x="99.9149%" y="517" width="0.0851%" height="15" fill="rgb(241,220,44)" fg:x="29392104" fg:w="25034"/><text x="100.1649%" y="527.50"></text></g></svg></svg>